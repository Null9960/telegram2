# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1QxYxdNyFk5CNhBSl6hHvrgDzl28MXWTv
"""

# تثبيت المكتبات اللازمة
!pip install fastapi uvicorn requests nest_asyncio

from fastapi import FastAPI, Request
import requests
import nest_asyncio
import uvicorn

# تفعيل FastAPI في Google Colab
nest_asyncio.apply()

app = FastAPI()

# عنوان Webhook في ChatGPT لاستقبال النتائج بعد التنفيذ
CHATGPT_WEBHOOK_URL = "https://your-chatgpt-webhook.com/process"

@app.post("/execute_code")
async def execute_code(request: Request):
    data = await request.json()
    code = data.get("code")

    try:
        # تنفيذ الكود البرمجي داخل Colab
        exec_locals = {}
        exec(code, {}, exec_locals)
        result = exec_locals.get("result", "تم تنفيذ الكود بنجاح!")

        # إرسال النتيجة إلى ChatGPT
        requests.post(CHATGPT_WEBHOOK_URL, json={"response": result})

        return {"status": "success", "result": result}

    except Exception as e:
        return {"status": "error", "message": str(e)}

# تشغيل الخادم داخل Google Colab
uvicorn.run(app, host="0.0.0.0", port=8000)

!pip install pyngrok

from pyngrok import ngrok

# فتح نفق على المنفذ 8000 (حيث يعمل FastAPI)
public_url = ngrok.connect(8000)
print("🔗 رابط API العام:", public_url)

ngrok authtoken DFFJ3B5YGUKOT5QA5KU64QTO2DPBCS2I

ngrok config add-authtoken 2u6BsGxIfgQPbF5wtOEO3aJEPf1_3DqKPAi4ZPnxuHkRSs2Sj

agent:
	authtoken: 2u6BsGxIfgQPbF5wtOEO3aJEPf1_3DqKPAi4ZPnxuHkRSs2Sj

!ngrok authtoken "2u6BsGxIfgQPbF5wtOEO3aJEPf1_3DqKPAi4ZPnxuHkRSs2Sj"

from pyngrok import ngrok

# تشغيل Ngrok على المنفذ 8000 (حيث يعمل FastAPI)
public_url = ngrok.connect(8000)
print("🔗 رابط API العام:", public_url)

# تثبيت المكتبات إذا لم تكن مثبتة
!pip install fastapi uvicorn nest_asyncio pyngrok

from fastapi import FastAPI, Request
import uvicorn
import nest_asyncio

# تفعيل التشغيل المتزامن
nest_asyncio.apply()

app = FastAPI()

@app.get("/")
def read_root():
    return {"message": "FastAPI يعمل بنجاح داخل Google Colab!"}

@app.post("/execute_code")
async def execute_code(request: Request):
    data = await request.json()
    code = data.get("code")

    try:
        exec_locals = {}
        exec(code, {}, exec_locals)
        result = exec_locals.get("result", "تم تنفيذ الكود بنجاح!")

        return {"status": "success", "result": result}

    except Exception as e:
        return {"status": "error", "message": str(e)}

# تشغيل الخادم على المنفذ 8000 داخل Google Colab
uvicorn.run(app, host="0.0.0.0", port=8000)

from pyngrok import ngrok

# فتح نفق على المنفذ 8000
public_url = ngrok.connect(8000)
print("🔗 رابط API العام:", public_url)

!kill -9 $(lsof -t -i:8000)

# تثبيت المكتبات المطلوبة
!pip install fastapi uvicorn nest_asyncio pyngrok

from fastapi import FastAPI, Request
import uvicorn
import nest_asyncio
from pyngrok import ngrok

# تفعيل التشغيل المتزامن
nest_asyncio.apply()

# إنشاء تطبيق FastAPI
app = FastAPI()

@app.get("/")
def read_root():
    return {"message": "🎉 FastAPI يعمل بنجاح داخل Google Colab!"}

@app.post("/execute_code")
async def execute_code(request: Request):
    data = await request.json()
    code = data.get("code")

    try:
        exec_locals = {}
        exec(code, {}, exec_locals)
        result = exec_locals.get("result", "تم تنفيذ الكود بنجاح!")

        return {"status": "success", "result": result}

    except Exception as e:
        return {"status": "error", "message": str(e)}

# تشغيل FastAPI في Google Colab
def run_api():
    uvicorn.run(app, host="0.0.0.0", port=8000)

# فتح نفق Ngrok على المنفذ 8000
public_url = ngrok.connect(8000)
print("🔗 رابط API العام:", public_url)

# تشغيل FastAPI
run_api()

# تثبيت المكتبات المطلوبة
!pip install fastapi uvicorn nest_asyncio pyngrok

from fastapi import FastAPI, Request
import uvicorn
import nest_asyncio
from pyngrok import ngrok
import subprocess

# تفعيل التشغيل المتزامن
nest_asyncio.apply()

# إنشاء تطبيق FastAPI
app = FastAPI()

@app.get("/")
def read_root():
    return {"message": "🎉 FastAPI يعمل بنجاح داخل Google Colab!"}

@app.post("/execute_code")
async def execute_code(request: Request):
    data = await request.json()
    code = data.get("code")

    try:
        exec_locals = {}
        exec(code, {}, exec_locals)
        result = exec_locals.get("result", "تم تنفيذ الكود بنجاح!")

        return {"status": "success", "result": result}

    except Exception as e:
        return {"status": "error", "message": str(e)}

# تشغيل FastAPI في الخلفية باستخدام subprocess
subprocess.Popen(["uvicorn", "main:app", "--host", "0.0.0.0", "--port", "8000"])

# تشغيل Ngrok لربط FastAPI بالإنترنت
public_url = ngrok.connect(8000)
print("🔗 رابط API العام:", public_url)

!kill -9 $(lsof -t -i:8000)

# تثبيت المكتبات إذا لم تكن مثبتة
!pip install fastapi uvicorn nest_asyncio pyngrok

from fastapi import FastAPI, Request
import uvicorn
import nest_asyncio
from pyngrok import ngrok
import threading

# تفعيل التشغيل المتزامن
nest_asyncio.apply()

# إنشاء تطبيق FastAPI
app = FastAPI()

@app.get("/")
def read_root():
    return {"message": "🎉 FastAPI يعمل بنجاح داخل Google Colab!"}

@app.post("/execute_code")
async def execute_code(request: Request):
    data = await request.json()
    code = data.get("code")

    try:
        exec_locals = {}
        exec(code, {}, exec_locals)
        result = exec_locals.get("result", "تم تنفيذ الكود بنجاح!")

        return {"status": "success", "result": result}

    except Exception as e:
        return {"status": "error", "message": str(e)}

# تشغيل FastAPI في Thread مستقل لمنع التوقف
def run_api():
    uvicorn.run(app, host="0.0.0.0", port=8000)

threading.Thread(target=run_api, daemon=True).start()

# تشغيل Ngrok وربط FastAPI بالإنترنت
public_url = ngrok.connect(8000)
print("🔗 رابط API العام:", public_url)

import requests

# 🔗 رابط API الخاص بك
API_URL = "https://cd35-35-197-72-15.ngrok-free.app/execute_code"

# 🔹 كود Python لتشغيله في Google Colab عبر API
data = {
    "code": "result = 10 + 5"
}

# 🔹 إرسال الطلب إلى API في Google Colab
response = requests.post(API_URL, json=data)

# 🔹 طباعة النتيجة المسترجعة من Google Colab
print("🔹 النتيجة المسترجعة:", response.json())

import requests

# 🔹 استبدل هذه القيم بتوكن البوت ومعرف الشات الخاص بك
TELEGRAM_BOT_TOKEN = "7629955358:AAHiu4vnCiiyyI73oETO4VDA--yZC3c2qqQ"
TELEGRAM_CHAT_ID = "1200335142"

def send_to_telegram(result):
    """إرسال النتيجة إلى Telegram"""
    message = f"🔹 النتيجة من Google Colab: {result}"
    requests.get(f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage?chat_id={TELEGRAM_CHAT_ID}&text={message}")

# 🔹 محاكاة استلام نتيجة من Google Colab
result_from_colab = 10 + 5  # مثال لنتيجة مرسلة من API
send_to_telegram(result_from_colab)

import requests
from flask import Flask, request, jsonify
import subprocess
import threading

# 🔹 إعداد توكن البوت ومعرف الشات الخاص بك
TELEGRAM_BOT_TOKEN = "7629955358:AAHiu4vnCiiyyI73oETO4VDA--yZC3c2qqQ"
TELEGRAM_CHAT_ID = "1200335142"

# 🔹 إعداد تطبيق Flask لتشغيل Webhook داخل Google Colab
app = Flask(__name__)

@app.route(f"/{TELEGRAM_BOT_TOKEN}", methods=["POST"])
def receive_message():
    data = request.json
    message_text = data["message"]["text"]
    chat_id = data["message"]["chat"]["id"]

    # 🔹 التأكد أن الرسالة واردة من معرف الشات الصحيح
    if str(chat_id) != TELEGRAM_CHAT_ID:
        return jsonify({"status": "error", "message": "Unauthorized chat ID"}), 403

    # 🔹 تنفيذ الكود المستلم من Telegram
    try:
        exec_locals = {}
        exec(message_text, {}, exec_locals)
        result = exec_locals.get("result", "✅ تم تنفيذ الكود بنجاح!")

    except Exception as e:
        result = f"❌ خطأ أثناء تنفيذ الكود: {str(e)}"

    # 🔹 إرسال النتيجة إلى Telegram
    send_to_telegram(result)
    return jsonify({"status": "success", "result": result})

def send_to_telegram(result):
    """إرسال النتيجة إلى Telegram"""
    url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
    data = {"chat_id": TELEGRAM_CHAT_ID, "text": f"🔹 نتيجة التنفيذ:\n{result}"}
    requests.post(url, data=data)

# 🔹 تشغيل Flask في Thread منفصل
def run_flask():
    app.run(host="0.0.0.0", port=5000)

threading.Thread(target=run_flask, daemon=True).start()

# 🔹 ربط Google Colab بالإنترنت عبر Ngrok
from pyngrok import ngrok
public_url = ngrok.connect(5000)
print(f"🔗 رابط Webhook: {public_url}/{TELEGRAM_BOT_TOKEN}")

# 🔹 إعداد Webhook في Telegram
telegram_url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/setWebhook?url={public_url}/{TELEGRAM_BOT_TOKEN}"
requests.get(telegram_url)
print("✅ Webhook متصل بـ Telegram بنجاح!")

# 🔹 تثبيت مكتبات Stable Diffusion
!pip install diffusers transformers accelerate torch torchvision

from diffusers import StableDiffusionPipeline
import torch

# 🔹 تحميل نموذج Stable Diffusion
pipe = StableDiffusionPipeline.from_pretrained("CompVis/stable-diffusion-v1-4")
pipe.to("cuda")  # تشغيل على GPU

# 🔹 توليد صورة بناءً على وصف نصي
def generate_image(prompt):
    image = pipe(prompt).images[0]
    image_path = "generated_image.png"
    image.save(image_path)
    return image_path

# 🔹 إرسال الصورة إلى Telegram
def send_image_to_telegram(image_path):
    url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendPhoto"
    with open(image_path, "rb") as image_file:
        files = {"photo": image_file}
        data = {"chat_id": TELEGRAM_CHAT_ID, "caption": "🔹 هذه هي الصورة التي تم إنشاؤها بواسطة الذكاء الاصطناعي!"}
        response = requests.post(url, files=files, data=data)
        return response.json()

# 🔹 تشغيل النموذج وإرسال الصورة إلى Telegram
prompt_text = "A futuristic cyberpunk city at sunset"
image_path = generate_image(prompt_text)
send_result = send_image_to_telegram(image_path)

# 🔹 طباعة النتيجة للتحقق
print("📩 تم إرسال الصورة إلى Telegram:", send_result)

import torch
print("🔹 هل يوجد GPU متاح؟", torch.cuda.is_available())
print("🔹 اسم وحدة GPU المتاحة:", torch.cuda.get_device_name(0) if torch.cuda.is_available() else "❌ لا يوجد GPU")

import requests
from diffusers import StableDiffusionPipeline
import torch

# 🔹 إعداد توكن البوت ومعرف الشات في Telegram
TELEGRAM_BOT_TOKEN = "7629955358:AAHiu4vnCiiyyI73oETO4VDA--yZC3c2qqQ"
TELEGRAM_CHAT_ID = "1200335142"

# 🔹 تحميل نموذج Stable Diffusion
pipe = StableDiffusionPipeline.from_pretrained("CompVis/stable-diffusion-v1-4")
pipe.to("cuda")  # تشغيل على GPU

print("✅ تم تحميل النموذج وتشغيله على GPU!")

# 🔹 توليد صورة بناءً على وصف نصي
def generate_image(prompt):
    print(f"🔹 توليد صورة للوصف: {prompt}")
    image = pipe(prompt).images[0]
    image_path = "generated_image.png"
    image.save(image_path)
    return image_path

# 🔹 إرسال الصورة إلى Telegram
def send_image_to_telegram(image_path):
    url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendPhoto"
    with open(image_path, "rb") as image_file:
        files = {"photo": image_file}
        data = {"chat_id": TELEGRAM_CHAT_ID, "caption": "🔹 هذه هي الصورة التي تم إنشاؤها بواسطة الذكاء الاصطناعي!"}
        response = requests.post(url, files=files, data=data)
        return response.json()

# 🔹 تشغيل النموذج وإرسال الصورة إلى Telegram
prompt_text = "A futuristic cyberpunk city at sunset"
image_path = generate_image(prompt_text)
send_result = send_image_to_telegram(image_path)

# 🔹 طباعة النتيجة للتحقق
print("📩 تم إرسال الصورة إلى Telegram:", send_result)

from google.colab import drive
import os

# 🔹 تحميل Google Drive
drive.mount('/content/drive')

# 🔹 تحديد مسار الملف المخزن في Google Drive
config_path = "/content/drive/My Drive/telegram_config.txt"

# 🔹 قراءة البيانات من الملف
def load_telegram_config(config_path):
    config = {}
    with open(config_path, "r") as file:
        for line in file:
            key, value = line.strip().split("=")
            config[key] = value
    return config

# 🔹 تحميل التوكن ومعرف الشات
telegram_config = load_telegram_config(config_path)
TELEGRAM_BOT_TOKEN = telegram_config.get("TELEGRAM_BOT_TOKEN")
TELEGRAM_CHAT_ID = telegram_config.get("TELEGRAM_CHAT_ID")

# 🔹 طباعة القيم للتأكد (يمكنك حذفها لاحقًا)
print(f"🔹 توكن البوت: {TELEGRAM_BOT_TOKEN[:10]}********")
print(f"🔹 معرف الشات: {TELEGRAM_CHAT_ID}")

from google.colab import drive
import os

# 🔹 تحميل Google Drive
drive.mount('/content/drive')

# 🔹 عرض قائمة الملفات في My Drive
!ls "/content/drive/My Drive"

# 🔹 تحديد المسار الصحيح للملف داخل Google Drive
config_path = "/content/drive/My Drive/telegram_config.txt"

# 🔹 وظيفة لتحميل القيم من الملف
def load_telegram_config(config_path):
    config = {}
    if os.path.exists(config_path):
        with open(config_path, "r") as file:
            for line in file:
                key, value = line.strip().split("=")
                config[key] = value
        return config
    else:
        print(f"❌ الملف غير موجود في: {config_path}")
        return None

# 🔹 تحميل القيم من Google Drive
telegram_config = load_telegram_config(config_path)

# 🔹 التأكد من تحميل القيم بنجاح
if telegram_config:
    TELEGRAM_BOT_TOKEN = telegram_config.get("TELEGRAM_BOT_TOKEN")
    TELEGRAM_CHAT_ID = telegram_config.get("TELEGRAM_CHAT_ID")

    print(f"✅ تم تحميل التوكن: {TELEGRAM_BOT_TOKEN[:10]}********")
    print(f"✅ تم تحميل معرف الشات: {TELEGRAM_CHAT_ID}")
else:
    print("❌ تأكد من أن الملف موجود في المسار الصحيح وأعد المحاولة.")

from google.colab import drive
import os

# 🔹 تحميل Google Drive
drive.mount('/content/drive', force_remount=True)

# 🔹 البحث عن الملف داخل Google Drive
!find /content/drive -name "telegram_config*"

import os

# 🔹 تحديد المسار الصحيح للملف
config_path = "/content/drive/MyDrive/telegram_config.txt"

# 🔹 وظيفة لتحميل القيم من الملف
def load_telegram_config(config_path):
    config = {}
    if os.path.exists(config_path):
        with open(config_path, "r") as file:
            for line in file:
                key, value = line.strip().split("=")
                config[key] = value
        return config
    else:
        print(f"❌ الملف غير موجود في: {config_path}")
        return None

# 🔹 تحميل القيم من Google Drive
telegram_config = load_telegram_config(config_path)

# 🔹 التأكد من تحميل القيم بنجاح
if telegram_config:
    TELEGRAM_BOT_TOKEN = telegram_config.get("TELEGRAM_BOT_TOKEN")
    TELEGRAM_CHAT_ID = telegram_config.get("TELEGRAM_CHAT_ID")

    print(f"✅ تم تحميل التوكن: {TELEGRAM_BOT_TOKEN[:10]}********")
    print(f"✅ تم تحميل معرف الشات: {TELEGRAM_CHAT_ID}")
else:
    print("❌ تأكد من أن الملف موجود في المسار الصحيح وأعد المحاولة.")

import os

# 🔹 تحديد المسار الصحيح للملف
config_path = "/content/drive/MyDrive/telegram_config.txt"

# 🔹 وظيفة لتحميل القيم من الملف مع معالجة الأخطاء
def load_telegram_config(config_path):
    config = {}
    if os.path.exists(config_path):
        with open(config_path, "r") as file:
            for line in file:
                line = line.strip()
                if "=" in line:  # ✅ التأكد من أن السطر يحتوي على "=" قبل تقسيمه
                    key, value = line.split("=", 1)  # ✅ تقسيم السطر مرة واحدة فقط
                    config[key] = value
    else:
        print(f"❌ الملف غير موجود في: {config_path}")
    return config

# 🔹 تحميل القيم من Google Drive
telegram_config = load_telegram_config(config_path)

# 🔹 التأكد من تحميل القيم بنجاح
if "TELEGRAM_BOT_TOKEN" in telegram_config and "TELEGRAM_CHAT_ID" in telegram_config:
    TELEGRAM_BOT_TOKEN = telegram_config["TELEGRAM_BOT_TOKEN"]
    TELEGRAM_CHAT_ID = telegram_config["TELEGRAM_CHAT_ID"]

    print(f"✅ تم تحميل التوكن: {TELEGRAM_BOT_TOKEN[:10]}********")
    print(f"✅ تم تحميل معرف الشات: {TELEGRAM_CHAT_ID}")
else:
    print("❌ تأكد من أن القيم موجودة بشكل صحيح في الملف.")

import requests

# 🔹 إرسال رسالة إلى Telegram باستخدام القيم المحفوظة
def send_message(message):
    url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
    data = {"chat_id": TELEGRAM_CHAT_ID, "text": message}
    response = requests.post(url, data=data)
    return response.json()

# 🔹 تجربة إرسال رسالة تأكيد
send_message("✅ تم تحميل التوكن ومعرف الشات من Google Drive بنجاح، والبوت يعمل الآن! 🚀")

import requests
from flask import Flask, request, jsonify
import threading
from pyngrok import ngrok
import os

# 🔹 تحميل Google Drive (للتأكد من أن التوكن متاح)
from google.colab import drive
drive.mount('/content/drive', force_remount=True)

# 🔹 تحديد مسار ملف التوكن المخزن في Google Drive
config_path = "/content/drive/MyDrive/telegram_config.txt"

# 🔹 تحميل القيم المخزنة
def load_telegram_config(config_path):
    config = {}
    if os.path.exists(config_path):
        with open(config_path, "r") as file:
            for line in file:
                key, value = line.strip().split("=")
                config[key] = value
    return config

telegram_config = load_telegram_config(config_path)

# 🔹 استرجاع التوكن ومعرف الشات من الملف
TELEGRAM_BOT_TOKEN = telegram_config["TELEGRAM_BOT_TOKEN"]
TELEGRAM_CHAT_ID = telegram_config["TELEGRAM_CHAT_ID"]

# 🔹 إعداد Flask لعمل Webhook
app = Flask(__name__)

@app.route(f"/{TELEGRAM_BOT_TOKEN}", methods=["POST"])
def receive_message():
    data = request.json
    if "message" in data:
        message_text = data["message"]["text"]
        chat_id = data["message"]["chat"]["id"]

        # 🔹 التأكد أن الرسالة واردة من المستخدم الصحيح
        if str(chat_id) != TELEGRAM_CHAT_ID:
            return jsonify({"status": "error", "message": "Unauthorized chat ID"}), 403

        # 🔹 تنفيذ الكود المستلم
        try:
            exec_locals = {}
            exec(message_text, {}, exec_locals)
            result = exec_locals.get("result", "✅ تم تنفيذ الكود بنجاح!")
        except Exception as e:
            result = f"❌ خطأ أثناء تنفيذ الكود: {str(e)}"

        # 🔹 إرسال النتيجة إلى Telegram
        send_to_telegram(result)
        return jsonify({"status": "success", "result": result})

def send_to_telegram(result):
    """إرسال النتيجة إلى Telegram"""
    url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
    data = {"chat_id": TELEGRAM_CHAT_ID, "text": f"🔹 نتيجة التنفيذ:\n{result}"}
    requests.post(url, data=data)

# 🔹 تشغيل Flask في Thread منفصل
def run_flask():
    app.run(host="0.0.0.0", port=5000)

threading.Thread(target=run_flask, daemon=True).start()

# 🔹 تشغيل Ngrok وربط Google Colab بالإنترنت
public_url = ngrok.connect(5000).public_url
print(f"🔗 رابط Webhook الجديد: {public_url}/{TELEGRAM_BOT_TOKEN}")

# 🔹 تحديث Webhook في Telegram
telegram_url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/setWebhook?url={public_url}/{TELEGRAM_BOT_TOKEN}"
requests.get(telegram_url)
print("✅ Webhook متصل بـ Telegram بنجاح!")

!pip install pyngrok

!pip install flask pyngrok

import requests
from flask import Flask, request, jsonify
import threading
from pyngrok import ngrok
import os

# 🔹 تحميل Google Drive
from google.colab import drive
drive.mount('/content/drive', force_remount=True)

# 🔹 تحديد مسار ملف التوكن في Google Drive
config_path = "/content/drive/MyDrive/telegram_config.txt"

# 🔹 تحميل القيم المخزنة
def load_telegram_config(config_path):
    config = {}
    if os.path.exists(config_path):
        with open(config_path, "r") as file:
            for line in file:
                key, value = line.strip().split("=")
                config[key] = value
    return config

telegram_config = load_telegram_config(config_path)

# 🔹 استرجاع التوكن ومعرف الشات من الملف
TELEGRAM_BOT_TOKEN = telegram_config["TELEGRAM_BOT_TOKEN"]
TELEGRAM_CHAT_ID = telegram_config["TELEGRAM_CHAT_ID"]

# 🔹 إعداد Flask لعمل Webhook
app = Flask(__name__)

@app.route(f"/{TELEGRAM_BOT_TOKEN}", methods=["POST"])
def receive_message():
    data = request.json
    if "message" in data:
        message_text = data["message"]["text"]
        chat_id = data["message"]["chat"]["id"]

        # 🔹 التأكد أن الرسالة واردة من المستخدم الصحيح
        if str(chat_id) != TELEGRAM_CHAT_ID:
            return jsonify({"status": "error", "message": "Unauthorized chat ID"}), 403

        # 🔹 تنفيذ الكود المستلم
        try:
            exec_locals = {}
            exec(message_text, {}, exec_locals)
            result = exec_locals.get("result", "✅ تم تنفيذ الكود بنجاح!")
        except Exception as e:
            result = f"❌ خطأ أثناء تنفيذ الكود: {str(e)}"

        # 🔹 إرسال النتيجة إلى Telegram
        send_to_telegram(result)
        return jsonify({"status": "success", "result": result})

def send_to_telegram(result):
    """إرسال النتيجة إلى Telegram"""
    url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
    data = {"chat_id": TELEGRAM_CHAT_ID, "text": f"🔹 نتيجة التنفيذ:\n{result}"}
    requests.post(url, data=data)

# 🔹 تشغيل Flask في Thread منفصل
def run_flask():
    app.run(host="0.0.0.0", port=5000)

threading.Thread(target=run_flask, daemon=True).start()

# 🔹 تشغيل Ngrok وربط Google Colab بالإنترنت
public_url = ngrok.connect(5000).public_url
print(f"🔗 رابط Webhook الجديد: {public_url}/{TELEGRAM_BOT_TOKEN}")

# 🔹 تحديث Webhook في Telegram
telegram_url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/setWebhook?url={public_url}/{TELEGRAM_BOT_TOKEN}"
requests.get(telegram_url)
print("✅ Webhook متصل بـ Telegram بنجاح!")

config_path = "/content/drive/MyDrive/telegram_config.txt"

# 🔹 قراءة الملف وعرض محتواه للتأكد من التنسيق الصحيح
with open(config_path, "r") as file:
    content = file.readlines()

print("🔹 محتوى `telegram_config.txt`:")
for line in content:
    print(f"> {line.strip()}")

import os

# 🔹 تحديد المسار الصحيح للملف
config_path = "/content/drive/MyDrive/telegram_config.txt"

# 🔹 وظيفة لتحميل القيم من الملف مع تجاهل الأخطاء
def load_telegram_config(config_path):
    config = {}
    if os.path.exists(config_path):
        with open(config_path, "r") as file:
            for line in file:
                line = line.strip()
                if "=" in line:  # ✅ التأكد من أن السطر يحتوي على "=" قبل تقسيمه
                    key, value = line.split("=", 1)  # ✅ تقسيم السطر مرة واحدة فقط
                    config[key] = value
    else:
        print(f"❌ الملف غير موجود في: {config_path}")
    return config

# 🔹 تحميل القيم من Google Drive
telegram_config = load_telegram_config(config_path)

# 🔹 التأكد من تحميل القيم بنجاح
if "TELEGRAM_BOT_TOKEN" in telegram_config and "TELEGRAM_CHAT_ID" in telegram_config:
    TELEGRAM_BOT_TOKEN = telegram_config["TELEGRAM_BOT_TOKEN"]
    TELEGRAM_CHAT_ID = telegram_config["TELEGRAM_CHAT_ID"]

    print(f"✅ تم تحميل التوكن: {TELEGRAM_BOT_TOKEN[:10]}********")
    print(f"✅ تم تحميل معرف الشات: {TELEGRAM_CHAT_ID}")
else:
    print("❌ تأكد من أن القيم موجودة بشكل صحيح في الملف.")

!pip install flask pyngrok

import requests
from flask import Flask, request, jsonify
import threading
from pyngrok import ngrok
import os

# 🔹 تشغيل Google Drive وتحميل القيم
from google.colab import drive
drive.mount('/content/drive', force_remount=True)

# 🔹 تحميل التوكن ومعرف الشات من Google Drive
config_path = "/content/drive/MyDrive/telegram_config.txt"
telegram_config = load_telegram_config(config_path)

TELEGRAM_BOT_TOKEN = telegram_config["TELEGRAM_BOT_TOKEN"]
TELEGRAM_CHAT_ID = telegram_config["TELEGRAM_CHAT_ID"]

# 🔹 إعداد Flask لعمل Webhook
app = Flask(__name__)

@app.route(f"/{TELEGRAM_BOT_TOKEN}", methods=["POST"])
def receive_message():
    data = request.json
    if "message" in data:
        message_text = data["message"]["text"]
        chat_id = data["message"]["chat"]["id"]

        # 🔹 التأكد أن الرسالة واردة من المستخدم الصحيح
        if str(chat_id) != TELEGRAM_CHAT_ID:
            return jsonify({"status": "error", "message": "Unauthorized chat ID"}), 403

        # 🔹 تنفيذ الكود المستلم
        try:
            exec_locals = {}
            exec(message_text, {}, exec_locals)
            result = exec_locals.get("result", "✅ تم تنفيذ الكود بنجاح!")
        except Exception as e:
            result = f"❌ خطأ أثناء تنفيذ الكود: {str(e)}"

        # 🔹 إرسال النتيجة إلى Telegram
        send_to_telegram(result)
        return jsonify({"status": "success", "result": result})

def send_to_telegram(result):
    """إرسال النتيجة إلى Telegram"""
    url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
    data = {"chat_id": TELEGRAM_CHAT_ID, "text": f"🔹 نتيجة التنفيذ:\n{result}"}
    requests.post(url, data=data)

# 🔹 تشغيل Flask في Thread منفصل
def run_flask():
    app.run(host="0.0.0.0", port=5000)

threading.Thread(target=run_flask, daemon=True).start()

# 🔹 تشغيل Ngrok وربط Google Colab بالإنترنت
public_url = ngrok.connect(5000).public_url
print(f"🔗 رابط Webhook الجديد: {public_url}/{TELEGRAM_BOT_TOKEN}")

# 🔹 تحديث Webhook في Telegram
telegram_url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/setWebhook?url={public_url}/{TELEGRAM_BOT_TOKEN}"
requests.get(telegram_url)
print("✅ Webhook متصل بـ Telegram بنجاح!")

!ngrok authtoken 2u6BsGxIfgQPbF5wtOEO3aJEPf1_3DqKPAi4ZPnxuHkRSs2Sj

from pyngrok import ngrok

# 🔹 تشغيل Ngrok وربط Google Colab بالإنترنت
public_url = ngrok.connect(5000).public_url
print(f"🔗 رابط Webhook الجديد: {public_url}")

import requests

# 🔹 إعداد Webhook مع Telegram
telegram_url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/setWebhook?url={public_url}/{TELEGRAM_BOT_TOKEN}"
response = requests.get(telegram_url)

if response.status_code == 200:
    print("✅ Webhook متصل بـ Telegram بنجاح!")
else:
    print("❌ فشل في ربط Webhook. تأكد من صحة البيانات.")

!pip install flask pyngrok requests diffusers transformers accelerate torch torchvision nest_asyncio fastapi uvicorn

from google.colab import drive
import os

# 🔹 تحميل Google Drive
drive.mount('/content/drive', force_remount=True)

# 🔹 تحديد مسار ملف التوكن المخزن في Google Drive
config_path = "/content/drive/MyDrive/telegram_config.txt"

# 🔹 تحميل القيم المخزنة
def load_telegram_config(config_path):
    config = {}
    if os.path.exists(config_path):
        with open(config_path, "r") as file:
            for line in file:
                line = line.strip()
                if "=" in line:
                    key, value = line.split("=", 1)
                    config[key] = value
    return config

# 🔹 تحميل القيم من Google Drive
telegram_config = load_telegram_config(config_path)

# 🔹 التأكد من تحميل القيم بنجاح
if "TELEGRAM_BOT_TOKEN" in telegram_config and "TELEGRAM_CHAT_ID" in telegram_config:
    TELEGRAM_BOT_TOKEN = telegram_config["TELEGRAM_BOT_TOKEN"]
    TELEGRAM_CHAT_ID = telegram_config["TELEGRAM_CHAT_ID"]

    print(f"✅ تم تحميل التوكن: {TELEGRAM_BOT_TOKEN[:10]}********")
    print(f"✅ تم تحميل معرف الشات: {TELEGRAM_CHAT_ID}")
else:
    print("❌ تأكد من أن القيم موجودة بشكل صحيح في الملف.")

import requests
from flask import Flask, request, jsonify
import threading
from pyngrok import ngrok

# 🔹 إعداد Flask لعمل Webhook
app = Flask(__name__)

@app.route(f"/{TELEGRAM_BOT_TOKEN}", methods=["POST"])
def receive_message():
    data = request.json
    if "message" in data:
        message_text = data["message"]["text"]
        chat_id = data["message"]["chat"]["id"]

        # 🔹 التأكد أن الرسالة واردة من المستخدم الصحيح
        if str(chat_id) != TELEGRAM_CHAT_ID:
            return jsonify({"status": "error", "message": "Unauthorized chat ID"}), 403

        # 🔹 تنفيذ الكود المستلم
        try:
            exec_locals = {}
            exec(message_text, {}, exec_locals)
            result = exec_locals.get("result", "✅ تم تنفيذ الكود بنجاح!")
        except Exception as e:
            result = f"❌ خطأ أثناء تنفيذ الكود: {str(e)}"

        # 🔹 إرسال النتيجة إلى Telegram
        send_to_telegram(result)
        return jsonify({"status": "success", "result": result})

def send_to_telegram(result):
    """إرسال النتيجة إلى Telegram"""
    url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
    data = {"chat_id": TELEGRAM_CHAT_ID, "text": f"🔹 نتيجة التنفيذ:\n{result}"}
    requests.post(url, data=data)

# 🔹 تشغيل Flask في Thread منفصل
def run_flask():
    app.run(host="0.0.0.0", port=5000)

threading.Thread(target=run_flask, daemon=True).start()

# 🔹 تشغيل Ngrok وربط Google Colab بالإنترنت
public_url = ngrok.connect(5000).public_url
print(f"🔗 رابط Webhook الجديد: {public_url}/{TELEGRAM_BOT_TOKEN}")

# 🔹 تحديث Webhook في Telegram
telegram_url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/setWebhook?url={public_url}/{TELEGRAM_BOT_TOKEN}"
requests.get(telegram_url)
print("✅ Webhook متصل بـ Telegram بنجاح!")

result = 5 + 10