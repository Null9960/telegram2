# -*- coding: utf-8 -*-
"""Untitled2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1lKnrcIpLjHtpPGxtmcPw75JIURu7U-Ec
"""

!apt-get update && apt-get install -y python3-pip

!python3 -m pip install --upgrade pip setuptools wheel

!pip install --upgrade --force-reinstall ipython jedi

!pip uninstall -y ipython ipykernel jedi decorator prompt-toolkit pygments tornado traitlets typing-extensions matplotlib-inline pexpect wcwidth pyzmq
!pip cache purge

import os
os._exit(0)

!pip install --upgrade google-colab
!pip install ipython==7.34.0 ipykernel==6.17.1 jedi==0.18.1 decorator==4.4.2 prompt-toolkit==3.0.20 pygments==2.10 tornado==6.1 traitlets==5.1.1 typing-extensions==4.1.1 matplotlib-inline==0.1.3 pexpect==4.8.0 wcwidth==0.2.5 pyzmq==22.3.0

!apt-get update && apt-get install -y libzmq3-dev

!pip uninstall -y pyzmq
!pip install --no-cache-dir --force-reinstall pyzmq

!pip install --upgrade --force-reinstall --no-cache-dir notebook

!kill -9 -1

!pip install --upgrade google-colab
!pip install --upgrade pip
!pip install --upgrade ipython ipykernel notebook

!pip check

!pip uninstall -y torch torchvision torchaudio nvidia-cublas-cu12 nvidia-cuda-cupti-cu12 nvidia-cuda-nvrtc-cu12 nvidia-cuda-runtime-cu12 nvidia-cudnn-cu12 nvidia-cufft-cu12 nvidia-curand-cu12 nvidia-cusolver-cu12 nvidia-cusparse-cu12 nvidia-nvjitlink-cu12 jedi pycairo

!apt-get update && apt-get upgrade -y

import torch
print(f"✅ إصدار Torch المثبت: {torch.__version__}")
print(f"🔹 هل يوجد GPU متاح؟ {'نعم' if torch.cuda.is_available() else 'لا'}")
print(f"🔹 اسم وحدة GPU المتاحة: {torch.cuda.get_device_name(0) if torch.cuda.is_available() else '❌ لا يوجد GPU'}")

import os
import requests
import threading
import json
from flask import Flask, request, jsonify
from google.colab import drive
from pyngrok import ngrok

# ✅ **تحميل Google Drive**
drive.mount('/content/drive')

# 🔹 **المسار إلى ملف التوكنات في Drive**
config_path = "/content/drive/MyDrive/telegram_config.txt"

# ✅ **تحميل التوكنات من Google Drive**
def load_telegram_config(config_path):
    config = {}
    if os.path.exists(config_path):
        with open(config_path, "r") as file:
            for line in file:
                key, value = line.strip().split("=")
                config[key] = value
    return config

telegram_config = load_telegram_config(config_path)

# ✅ **استخراج القيم**
TELEGRAM_BOT_TOKEN = telegram_config["TELEGRAM_BOT_TOKEN"]
TELEGRAM_CHAT_ID = telegram_config["TELEGRAM_CHAT_ID"]

print(f"✅ تم تحميل التوكن بنجاح: {TELEGRAM_BOT_TOKEN[:10]}********")
print(f"✅ تم تحميل معرف الشات: {TELEGRAM_CHAT_ID}")

# 🔹 **إعداد Flask**
app = Flask(__name__)

@app.route(f"/{TELEGRAM_BOT_TOKEN}", methods=["POST"])
def receive_message():
    """استقبال الرسائل من Telegram"""
    data = request.json
    if "message" in data:
        message_text = data["message"]["text"]
        chat_id = data["message"]["chat"]["id"]

        # ✅ **التأكد أن الرسالة واردة من المستخدم الصحيح**
        if str(chat_id) != TELEGRAM_CHAT_ID:
            return jsonify({"status": "error", "message": "Unauthorized chat ID"}), 403

        # ✅ **تنفيذ الكود المستلم**
        try:
            exec_locals = {}
            exec(message_text, {}, exec_locals)
            result = exec_locals.get("result", "✅ تم تنفيذ الكود بنجاح!")
        except Exception as e:
            result = f"❌ خطأ أثناء تنفيذ الكود: {str(e)}"

        # ✅ **إرسال النتيجة إلى Telegram**
        send_to_telegram(result)
        return jsonify({"status": "success", "result": result})

def send_to_telegram(result):
    """إرسال النتيجة إلى Telegram"""
    url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
    data = {"chat_id": TELEGRAM_CHAT_ID, "text": f"🔹 نتيجة التنفيذ:\n{result}"}
    requests.post(url, data=data)

# ✅ **تشغيل Flask في Thread مستقل**
def run_flask():
    app.run(host="0.0.0.0", port=5000)

threading.Thread(target=run_flask, daemon=True).start()

# ✅ **تشغيل Ngrok وربط Google Colab بالإنترنت**
public_url = ngrok.connect(5000).public_url
print(f"🔗 رابط Webhook الجديد: {public_url}/{TELEGRAM_BOT_TOKEN}")

# ✅ **إعداد Webhook في Telegram**
telegram_url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/setWebhook?url={public_url}/{TELEGRAM_BOT_TOKEN}"
requests.get(telegram_url)
print("✅ Webhook متصل بـ Telegram بنجاح!")

!pip install flask pyngrok requests

import os
import json
from flask import Flask, request
from google.colab import drive
from pyngrok import ngrok

# ✅ تحميل Google Drive
drive.mount('/content/drive')

# ✅ قراءة التوكن من Google Drive
TELEGRAM_CONFIG_PATH = "/content/drive/My Drive/telegram_config.txt"
if os.path.exists(TELEGRAM_CONFIG_PATH):
    with open(TELEGRAM_CONFIG_PATH, "r") as f:
        config = json.load(f)
        TELEGRAM_BOT_TOKEN = config["TELEGRAM_BOT_TOKEN"]
        TELEGRAM_CHAT_ID = config["TELEGRAM_CHAT_ID"]
else:
    raise FileNotFoundError("❌ لم يتم العثور على ملف التوكن في Google Drive!")

# ✅ تشغيل Flask
app = Flask(__name__)

@app.route(f'/{TELEGRAM_BOT_TOKEN}', methods=['POST'])
def webhook():
    update = request.get_json()
    print(f"📩 استلام رسالة جديدة من Telegram: {update}")
    return '', 200

# ✅ تشغيل `ngrok` وربط Google Colab بالإنترنت
public_url = ngrok.connect(5000).public_url
print(f"🔗 رابط Webhook الجديد: {public_url}/{TELEGRAM_BOT_TOKEN}")

# ✅ تشغيل الخادم
app.run(port=5000)

TELEGRAM_CONFIG_PATH = "/content/drive/My Drive/telegram_config.txt"

if os.path.exists(TELEGRAM_CONFIG_PATH):
    with open(TELEGRAM_CONFIG_PATH, "r") as f:
        content = f.read()
    print(f"📂 محتوى الملف:\n{content}")
else:
    print("❌ لم يتم العثور على ملف التوكن في Google Drive!")

TELEGRAM_CONFIG_PATH = "/content/drive/My Drive/telegram_config.txt"

if os.path.exists(TELEGRAM_CONFIG_PATH):
    with open(TELEGRAM_CONFIG_PATH, "r") as f:
        content = f.read()
    print(f"📂 محتوى الملف:\n{content}")
else:
    print("❌ لم يتم العثور على ملف التوكن في Google Drive!")

import os
import json

# ✅ مسار ملف التوكن في Google Drive
TELEGRAM_CONFIG_PATH = "/content/drive/My Drive/telegram_config.txt"

# ✅ التحقق من وجود الملف وتحميل التوكن
if os.path.exists(TELEGRAM_CONFIG_PATH):
    with open(TELEGRAM_CONFIG_PATH, "r") as f:
        config = json.load(f)

    TELEGRAM_BOT_TOKEN = config.get("TELEGRAM_BOT_TOKEN", "")
    TELEGRAM_CHAT_ID = config.get("TELEGRAM_CHAT_ID", "")

    if TELEGRAM_BOT_TOKEN and TELEGRAM_CHAT_ID:
        print(f"✅ تم تحميل التوكن بنجاح: {TELEGRAM_BOT_TOKEN[:10]}********")
        print(f"✅ تم تحميل معرف الشات: {TELEGRAM_CHAT_ID}")
    else:
        print("⚠️ يوجد خطأ في ملف التوكن، تأكد من صحة المحتوى.")
else:
    print("❌ لم يتم العثور على ملف التوكن في Google Drive!")

import requests

# ✅ إرسال رسالة اختبار إلى Telegram
message = "🚀 اختبار ناجح: تم تحميل التوكن من Google Drive بنجاح!"
url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
params = {"chat_id": TELEGRAM_CHAT_ID, "text": message}

response = requests.get(url, params=params)
if response.status_code == 200:
    print("✅ تم إرسال الرسالة بنجاح!")
else:
    print(f"❌ فشل في إرسال الرسالة! رمز الخطأ: {response.status_code}")

import requests

# ✅ إرسال رسالة اختبار إلى Telegram
message = "🚀 اختبار ناجح: تم تحميل التوكن من Google Drive بنجاح!"
url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
params = {"chat_id": TELEGRAM_CHAT_ID, "text": message}

response = requests.get(url, params=params)
if response.status_code == 200:
    print("✅ تم إرسال الرسالة بنجاح!")
else:
    print(f"❌ فشل في إرسال الرسالة! رمز الخطأ: {response.status_code}")

!ls /content/

import requests

TELEGRAM_BOT_TOKEN = "توكن_البوت"
WEBHOOK_URL = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/getWebhookInfo"

response = requests.get(WEBHOOK_URL)
print(response.json())

requests.get(f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/deleteWebhook")
requests.get(f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/setWebhook?url={public_url}")

import requests

TELEGRAM_BOT_TOKEN = "توكن_البوت_هنا"
response = requests.get(f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/getMe")
print(response.json())

import os
import json

# 🔹 مسار ملف التوكن في Google Drive
TELEGRAM_CONFIG_PATH = "/content/drive/My Drive/telegram_config.json"

# ✅ التحقق من وجود الملف قبل تحميله
if os.path.exists(TELEGRAM_CONFIG_PATH):
    with open(TELEGRAM_CONFIG_PATH, "r") as f:
        config = json.load(f)
        TELEGRAM_BOT_TOKEN = config.get("TELEGRAM_BOT_TOKEN", "")
        TELEGRAM_CHAT_ID = config.get("TELEGRAM_CHAT_ID", "")

    if TELEGRAM_BOT_TOKEN and TELEGRAM_CHAT_ID:
        print(f"✅ تم تحميل التوكن بنجاح: {TELEGRAM_BOT_TOKEN[:10]}********")
        print(f"✅ تم تحميل معرف الشات: {TELEGRAM_CHAT_ID}")
    else:
        print("❌ خطأ: لم يتم العثور على القيم داخل JSON، تحقق من صحة الملف.")
else:
    print("❌ خطأ: ملف التوكن غير موجود في Google Drive، تأكد من رفعه.")

import os
import json
import subprocess
import requests
from flask import Flask, request, jsonify
from google.colab import drive
from pyngrok import ngrok

# ✅ **تحميل Google Drive**
drive.mount('/content/drive')

# ✅ **تحميل التوكنات من Google Drive**
TELEGRAM_CONFIG_PATH = "/content/drive/My Drive/telegram_config.json"

if os.path.exists(TELEGRAM_CONFIG_PATH):
    with open(TELEGRAM_CONFIG_PATH, "r") as f:
        config = json.load(f)
        TELEGRAM_BOT_TOKEN = config["TELEGRAM_BOT_TOKEN"]
        TELEGRAM_CHAT_ID = config["TELEGRAM_CHAT_ID"]
else:
    raise FileNotFoundError("❌ لم يتم العثور على ملف التوكنات في Google Drive!")

# ✅ **إعداد Flask**
app = Flask(__name__)

# ✅ **تنفيذ الأوامر المستلمة من Telegram**
@app.route(f"/{TELEGRAM_BOT_TOKEN}", methods=["POST"])
def handle_update():
    update = request.get_json()

    if "message" in update and "text" in update["message"]:
        chat_id = update["message"]["chat"]["id"]
        command = update["message"]["text"]

        # ✅ **تنفيذ الأمر المرسل**
        try:
            result = subprocess.run(command, shell=True, capture_output=True, text=True)
            response = f"📌 **الأمر:**\n```{command}```\n\n✅ **النتيجة:**\n```\n{result.stdout}\n```"
        except Exception as e:
            response = f"❌ **حدث خطأ أثناء تنفيذ الأمر:** {str(e)}"

        # ✅ **إرسال النتيجة إلى Telegram**
        send_telegram_message(chat_id, response)

    return jsonify({"status": "success"})

# ✅ **إرسال رسالة إلى Telegram**
def send_telegram_message(chat_id, message):
    url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
    payload = {
        "chat_id": chat_id,
        "text": message,
        "parse_mode": "Markdown"
    }
    requests.post(url, json=payload)

# ✅ **تفعيل Ngrok وربط Webhook**
def start_ngrok():
    public_url = ngrok.connect(5000).public_url
    print(f"🔗 رابط Webhook الجديد: {public_url}/{TELEGRAM_BOT_TOKEN}")

    # ✅ **تحديث Webhook في Telegram**
    webhook_url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/setWebhook?url={public_url}/{TELEGRAM_BOT_TOKEN}"
    response = requests.get(webhook_url)

    if response.status_code == 200:
        print("✅ Webhook متصل بـ Telegram بنجاح!")
    else:
        print(f"❌ فشل في ربط Webhook: {response.text}")

# ✅ **تشغيل التطبيق**
if __name__ == "__main__":
    start_ngrok()
    app.run(port=5000)

import os
import json
import requests
import subprocess
from flask import Flask, request, jsonify
from google.colab import drive
from pyngrok import ngrok

# ✅ **تحميل Google Drive**
drive.mount('/content/drive')

# ✅ **تحميل التوكنات من Google Drive**
TELEGRAM_CONFIG_PATH = "/content/drive/My Drive/telegram_config.json"

if os.path.exists(TELEGRAM_CONFIG_PATH):
    with open(TELEGRAM_CONFIG_PATH, "r") as f:
        config = json.load(f)
        TELEGRAM_BOT_TOKEN = config["TELEGRAM_BOT_TOKEN"]
        TELEGRAM_CHAT_ID = config["TELEGRAM_CHAT_ID"]
else:
    raise FileNotFoundError("❌ لم يتم العثور على ملف التوكنات في Google Drive!")

# ✅ **إعداد Flask**
app = Flask(__name__)

# ✅ **تنفيذ الأوامر المستلمة من Telegram**
@app.route(f"/{TELEGRAM_BOT_TOKEN}", methods=["POST"])
def handle_update():
    update = request.get_json()

    if "message" in update and "text" in update["message"]:
        chat_id = update["message"]["chat"]["id"]
        command = update["message"]["text"]

        # ✅ **تنفيذ الأمر المرسل**
        try:
            result = subprocess.run(command, shell=True, capture_output=True, text=True)
            response = f"📌 **الأمر:**\n```{command}```\n\n✅ **النتيجة:**\n```\n{result.stdout}\n```"
        except Exception as e:
            response = f"❌ **حدث خطأ أثناء تنفيذ الأمر:** {str(e)}"

        # ✅ **إرسال النتيجة إلى Telegram**
        send_telegram_message(chat_id, response)

    return jsonify({"status": "success"})

# ✅ **إرسال رسالة إلى Telegram**
def send_telegram_message(chat_id, message):
    url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
    payload = {
        "chat_id": chat_id,
        "text": message,
        "parse_mode": "Markdown"
    }
    requests.post(url, json=payload)

# ✅ **تفعيل Ngrok وربط Webhook**
def start_ngrok():
    print("⏳ جاري بدء Ngrok...")
    NGROK_AUTH_TOKEN = "2u6BsGxIfgQPbF5wtOEO3aJEPf1_3DqKPAi4ZPnxuHkRSs2Sj"

    # ✅ **إعداد Ngrok Authtoken**
    ngrok.set_auth_token(NGROK_AUTH_TOKEN)

    # ✅ **فتح نفق Ngrok**
    public_url = ngrok.connect(5000).public_url
    print(f"🔗 رابط Webhook الجديد: {public_url}/{TELEGRAM_BOT_TOKEN}")

    # ✅ **تحديث Webhook في Telegram**
    webhook_url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/setWebhook?url={public_url}/{TELEGRAM_BOT_TOKEN}"
    response = requests.get(webhook_url)

    if response.status_code == 200:
        print("✅ Webhook متصل بـ Telegram بنجاح!")
    else:
        print(f"❌ فشل في ربط Webhook: {response.text}")

# ✅ **تشغيل التطبيق**
if __name__ == "__main__":
    start_ngrok()
    app.run(port=5000)